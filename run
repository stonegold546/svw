Auctioneer:
Welcome to round 1 of negotiations.
The prices have been set at:
  1 for Good 1; and
  1 for Good 2
Producers, would you please turn in your production plans?
================
Producer 1
Production Plan = Good 1: 32.23539856315299 | Good 2: 13.815170812779852
---
Producer 2
Production Plan = Good 1: 14.77304415818052 | Good 2: 44.319132474541554
================
Auctioneer:
Consumers, please submit your requests your requests.
================
      .RINRUBY.KEEPTRYING.VARIABLE <- TRUE
      while ( .RINRUBY.KEEPTRYING.VARIABLE ) {
        .RINRUBY.PULL.SOCKET <- try(suppressWarnings(socketConnection("127.0.0.1 ", 38795, blocking=TRUE, open="rb")),TRUE)
        if ( inherits(.RINRUBY.PULL.SOCKET,"try-error") ) {
          Sys.sleep(0.1)
        } else {
          .RINRUBY.KEEPTRYING.VARIABLE <- FALSE
        }
      }
      rm(.RINRUBY.KEEPTRYING.VARIABLE)
    rinruby_get_value <-function() {
      value <- NULL
      type <- readBin(.RINRUBY.PULL.SOCKET, integer(), 1, endian="big")
      length <- readBin(.RINRUBY.PULL.SOCKET,integer(),1,endian="big")
      if ( type == 0 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,numeric(), length,endian="big")
        } else if ( type == 1 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,integer(), length, endian="big")
        } else if ( type == 2 ) {
        value <- readBin(.RINRUBY.PULL.SOCKET,character(),1,endian="big")
        } else {
          value <-NULL
        }
      value
      }
 rinruby_pull <-function(var)
{
  if ( inherits(var ,"try-error") ) {
     writeBin(as.integer(-2),.RINRUBY.PULL.SOCKET,endian="big")
  } else {
    if (is.matrix(var)) {
      writeBin(as.integer(4),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[1]),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(dim(var)[2]),.RINRUBY.PULL.SOCKET,endian="big")
      
    }  else if ( is.double(var) ) {
      writeBin(as.integer(0),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.integer(var) ) {
      writeBin(as.integer(1),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) == 1 ) ) {
      writeBin(as.integer(2),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(nchar(var)),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(var,.RINRUBY.PULL.SOCKET,endian="big")
    } else if ( is.character(var) && ( length(var) > 1 ) ) {
      writeBin(as.integer(3),.RINRUBY.PULL.SOCKET,endian="big")
      writeBin(as.integer(length(var)),.RINRUBY.PULL.SOCKET,endian="big")
    } else {
      writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET,endian="big")
    }
  }
}
    rinruby_parseable<-function(var) {
      result=try(parse(text=var),TRUE)
      if(inherits(result, "try-error")) {
        writeBin(as.integer(-1),.RINRUBY.PULL.SOCKET, endian="big")
      } else {
        writeBin(as.integer(1),.RINRUBY.PULL.SOCKET, endian="big")
      }
    }
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
eq_v <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
en <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
th <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_11 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_12 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_21 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_22 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      library(optimx)
      u_f <- function(x, y){
        result <- -(eq_v[1] * (eq_v[2] * x ** eq_v[3] + (1 - eq_v[2]) * y **
                  eq_v[3]) ** (eq_v[4] / eq_v[3]))
        return(result)
      }
      budg <- function(en, y_1, y_2){
        en + th[1] * y_1 + th[2] * y_2
      }
      opt <- optimx(c(0,0), function(x) u_f(x[1], x[2]), lower=0,
      upper=c(budg(en[1], y_11, y_21), budg(en[2], y_12, y_22)))
      a <- opt$p1
      b <- opt$p2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(a))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(b))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
eq_v <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
en <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
th <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_11 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_12 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_21 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_22 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      library(optimx)
      u_f <- function(x, y){
        result <- -(eq_v[1] * (eq_v[2] * x ** eq_v[3] + (1 - eq_v[2]) * y **
                  eq_v[3]) ** (eq_v[4] / eq_v[3]))
        return(result)
      }
      budg <- function(en, y_1, y_2){
        en + th[1] * y_1 + th[2] * y_2
      }
      opt <- optimx(c(0,0), function(x) u_f(x[1], x[2]), lower=0,
      upper=c(budg(en[1], y_11, y_21), budg(en[2], y_12, y_22)))
      a <- opt$p1
      b <- opt$p2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(a))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(b))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
eq_v <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
en <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
th <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_11 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_12 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_21 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_22 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      library(optimx)
      u_f <- function(x, y){
        result <- -(eq_v[1] * (eq_v[2] * x ** eq_v[3] + (1 - eq_v[2]) * y **
                  eq_v[3]) ** (eq_v[4] / eq_v[3]))
        return(result)
      }
      budg <- function(en, y_1, y_2){
        en + th[1] * y_1 + th[2] * y_2
      }
      opt <- optimx(c(0,0), function(x) u_f(x[1], x[2]), lower=0,
      upper=c(budg(en[1], y_11, y_21), budg(en[2], y_12, y_22)))
      a <- opt$p1
      b <- opt$p2
print('RINRUBY.EVAL.FLAG')
Consumer 1
Consumption Plan = Good 1: 20.326072672715352 | Good 2: 23.821808067474407
---
Consumer 2
Consumption Plan = Good 1: 21.057141648036158 | Good 2: 28.304117481104733
---
Consumer 3
Consumption Plan = Good 1: 14.625228400582001 | Good 2: 19.00837773874227
================
1.0 1.0000000000000002
0.0 7.105427357601002e-15


Auctioneer:
Welcome to round 2 of negotiations.
The prices have been set at:
  1.0 for Good 1; and
  1.0000000000000002 for Good 2
Producers, would you please turn in your production plans?
================
Producer 1
Production Plan = Good 1: 32.23539856315299 | Good 2: 13.815170812779852
---
Producer 2
Production Plan = Good 1: 14.773044158180525 | Good 2: 44.319132474541554
================
Auctioneer:
Consumers, please submit your requests your requests.
================
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(a))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(b))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
eq_v <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
en <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
th <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_11 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_12 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_21 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_22 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      library(optimx)
      u_f <- function(x, y){
        result <- -(eq_v[1] * (eq_v[2] * x ** eq_v[3] + (1 - eq_v[2]) * y **
                  eq_v[3]) ** (eq_v[4] / eq_v[3]))
        return(result)
      }
      budg <- function(en, y_1, y_2){
        en + th[1] * y_1 + th[2] * y_2
      }
      opt <- optimx(c(0,0), function(x) u_f(x[1], x[2]), lower=0,
      upper=c(budg(en[1], y_11, y_21), budg(en[2], y_12, y_22)))
      a <- opt$p1
      b <- opt$p2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(a))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(b))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
eq_v <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
en <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
th <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_11 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_12 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_21 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_22 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      library(optimx)
      u_f <- function(x, y){
        result <- -(eq_v[1] * (eq_v[2] * x ** eq_v[3] + (1 - eq_v[2]) * y **
                  eq_v[3]) ** (eq_v[4] / eq_v[3]))
        return(result)
      }
      budg <- function(en, y_1, y_2){
        en + th[1] * y_1 + th[2] * y_2
      }
      opt <- optimx(c(0,0), function(x) u_f(x[1], x[2]), lower=0,
      upper=c(budg(en[1], y_11, y_21), budg(en[2], y_12, y_22)))
      a <- opt$p1
      b <- opt$p2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(a))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(b))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
eq_v <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
en <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
th <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_11 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_12 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_21 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_22 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      library(optimx)
      u_f <- function(x, y){
        result <- -(eq_v[1] * (eq_v[2] * x ** eq_v[3] + (1 - eq_v[2]) * y **
                  eq_v[3]) ** (eq_v[4] / eq_v[3]))
        return(result)
      }
      budg <- function(en, y_1, y_2){
        en + th[1] * y_1 + th[2] * y_2
      }
      opt <- optimx(c(0,0), function(x) u_f(x[1], x[2]), lower=0,
      upper=c(budg(en[1], y_11, y_21), budg(en[2], y_12, y_22)))
      a <- opt$p1
      b <- opt$p2
print('RINRUBY.EVAL.FLAG')
Consumer 1
Consumption Plan = Good 1: 20.326072672715355 | Good 2: 23.821808067474407
---
Consumer 2
Consumption Plan = Good 1: 21.057141648036158 | Good 2: 28.304117481104733
---
Consumer 3
Consumption Plan = Good 1: 14.625228400582003 | Good 2: 19.00837773874227
================
1.0 1.0000000000000004
0.0 7.105427357601002e-15


Auctioneer:
Welcome to round 3 of negotiations.
The prices have been set at:
  1.0 for Good 1; and
  1.0000000000000004 for Good 2
Producers, would you please turn in your production plans?
================
Producer 1
Production Plan = Good 1: 32.23539856315299 | Good 2: 13.815170812779847
---
Producer 2
Production Plan = Good 1: 14.773044158180525 | Good 2: 44.319132474541554
================
Auctioneer:
Consumers, please submit your requests your requests.
================
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(a))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(b))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
eq_v <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
en <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
th <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_11 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_12 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_21 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_22 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      library(optimx)
      u_f <- function(x, y){
        result <- -(eq_v[1] * (eq_v[2] * x ** eq_v[3] + (1 - eq_v[2]) * y **
                  eq_v[3]) ** (eq_v[4] / eq_v[3]))
        return(result)
      }
      budg <- function(en, y_1, y_2){
        en + th[1] * y_1 + th[2] * y_2
      }
      opt <- optimx(c(0,0), function(x) u_f(x[1], x[2]), lower=0,
      upper=c(budg(en[1], y_11, y_21), budg(en[2], y_12, y_22)))
      a <- opt$p1
      b <- opt$p2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(a))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(b))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
eq_v <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
en <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
th <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_11 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_12 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_21 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_22 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      library(optimx)
      u_f <- function(x, y){
        result <- -(eq_v[1] * (eq_v[2] * x ** eq_v[3] + (1 - eq_v[2]) * y **
                  eq_v[3]) ** (eq_v[4] / eq_v[3]))
        return(result)
      }
      budg <- function(en, y_1, y_2){
        en + th[1] * y_1 + th[2] * y_2
      }
      opt <- optimx(c(0,0), function(x) u_f(x[1], x[2]), lower=0,
      upper=c(budg(en[1], y_11, y_21), budg(en[2], y_12, y_22)))
      a <- opt$p1
      b <- opt$p2
print('RINRUBY.EVAL.FLAG')
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(a))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      rinruby_pull(try(b))
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
eq_v <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
en <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
th <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_11 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_12 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_21 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
.RINRUBY.PARSE.STRING <- rinruby_get_value()
      rinruby_pull(try(as.integer(ifelse(inherits(try({eval(parse(text=paste(.RI NRUBY.PARSE.STRING,'<- 1')))}, silent=TRUE),'try-error'),1,0))))
rm(.RINRUBY.PARSE.STRING)
y_22 <- rinruby_get_value()
.RINRUBY.PARSE.STRING <- rinruby_get_value()
rinruby_parseable(.RINRUBY.PARSE.STRING)
rm(.RINRUBY.PARSE.STRING)
      library(optimx)
      u_f <- function(x, y){
        result <- -(eq_v[1] * (eq_v[2] * x ** eq_v[3] + (1 - eq_v[2]) * y **
                  eq_v[3]) ** (eq_v[4] / eq_v[3]))
        return(result)
      }
      budg <- function(en, y_1, y_2){
        en + th[1] * y_1 + th[2] * y_2
      }
      opt <- optimx(c(0,0), function(x) u_f(x[1], x[2]), lower=0,
      upper=c(budg(en[1], y_11, y_21), budg(en[2], y_12, y_22)))
      a <- opt$p1
      b <- opt$p2
print('RINRUBY.EVAL.FLAG')
Consumer 1
Consumption Plan = Good 1: 20.326072672715355 | Good 2: 23.821808067474407
---
Consumer 2
Consumption Plan = Good 1: 21.057141648036158 | Good 2: 28.304117481104733
---
Consumer 3
Consumption Plan = Good 1: 14.625228400582003 | Good 2: 19.008377738742265
================
1.0 1.0000000000000004
0.0 0.0


